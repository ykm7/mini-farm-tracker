package core

import (
	"encoding/binary"
	"errors"
	"fmt"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

const DATABASE_NAME string = "db"

type SENSOR_MODELS string

const (
	LDDS45 SENSOR_MODELS = "LDDS45"
)

type DB_COLLECTIONS string

const (
	RAW_DATA_COLLECTION              DB_COLLECTIONS = "raw_data"
	CALIBRATED_DATA_COLLECTION       DB_COLLECTIONS = "calibrated_data"
	SENSOR_CONFIGURATIONS_COLLECTION DB_COLLECTIONS = "sensor_configurations"
	SENSORS_COLLECTION               DB_COLLECTIONS = "sensors"
)

type Sensor struct {
	Id          string `bson:"_id"`
	Description string `bson:"description"`
}

type RawData struct {
	Id        primitive.ObjectID `bson:"_id,omitempty"`
	Timestamp primitive.DateTime `bson:"timestamp"`
	Sensor    string             `bson:"sensor"`
	Data      uint16             `bson:"data"`
}

type LDDS45RawData struct {
	Battery      uint16
	Distance     uint16
	InterruptPin uint8
	Temperature  float32
	SensorFlag   uint8
}

type CalibratedData struct {
	Id        primitive.ObjectID `bson:"_id,omitempty"`
	Timestamp primitive.DateTime `bson:"timestamp"`
	Sensor    string             `bson:"sensor"`
	Data      int64              `bson:"data"`
}

type SensorConfiguration struct {
	Id        primitive.ObjectID `bson:"_id,omitempty"`
	Sensor    string             `bson:"sensor"`
	Timestamp primitive.DateTime `bson:"timestamp"`
}

type SensorModel struct {
	Id    SENSOR_MODELS `bson:"_id"`
	Units string        `bson:"units"`
}

func (s *SensorModel) parsePayload(bs []byte) (parsed interface{}, err error) {

	switch s.Id {
	case LDDS45:
		parsed, err = parseLDDS45(bs)

	default:
		err = errors.New(fmt.Sprintf("Unknown sensor model: %s, with payload: %s", s.Id, bs))
	}

	return
}

/*
https://wiki.dragino.com/xwiki/bin/view/Main/User%20Manual%20for%20LoRaWAN%20End%20Nodes/LDDS45%20-%20LoRaWAN%20Distance%20Detection%20Sensor%20User%20Manual/#H2.A0ConfigureLDDS45toconnecttoLoRaWANnetwork
2.3  â€‹Uplink Payload

2.3.1  Battery Info
Check the battery voltage for LDDS45.
Ex1: 0x0B45 = 2885mV
Ex2: 0x0B49 = 2889mV

2.3.2  Distance
Get the distance. Flat object range 30mm - 4500mm.
For example, if the data you get from the register is 0x0B 0x05, the distance between the sensor and the measured object is
0B05(H) = 2821 (D) = 2821 mm.

	If the sensor value is 0x0000, it means system doesn't detect ultrasonic sensor.
	If the sensor value lower than 0x001E (30mm), the sensor value will be 0x00.

2.3.3  Interrupt Pin
This data field shows if this packet is generated by interrupt or not. Click here for the hardware and software set up.
Example:
0x00: Normal uplink packet.
0x01: Interrupt Uplink Packet.

2.3.4  DS18B20 Temperature sensor
This is optional, user can connect external DS18B20 sensor to the +3.3v, 1-wire and GND pin . and this field will report temperature.
Example:
If payload is: 0105H:  (0105 & FC00 == 0), temp = 0105H /10 = 26.1 degree
If payload is: FF3FH :  (FF3F & FC00 == 1) , temp = (FF3FH - 65536)/10 = -19.3 degrees.

2.3.5  Sensor Flag
0x01: Detect Ultrasonic Sensor
0x00: No Ultrasonic Sensor
*/
func parseLDDS45(bs []byte) (*LDDS45RawData, error) {
	if len(bs) != 8 {
		return nil, errors.New("Expected 8 bytes when parsing LDDS45 payload")
	}

	battery := uint16(bs[0])<<8 | uint16(bs[1])

	distance := uint16(bs[2])<<8 | uint16(bs[3])

	interrupt := uint8(bs[4])

	raw_temperature := uint16(bs[5])<<8 | uint16(bs[6])
	positive_temp := raw_temperature&binary.BigEndian.Uint16([]byte{0xFC, 0x00}) == 0

	var temperature float32
	if positive_temp {
		temperature = float32(raw_temperature) / 10
	} else {
		temperature = float32(raw_temperature) - 65536/10
	}

	sensorFlag := uint8(bs[7])

	return &LDDS45RawData{
		Battery:      battery,
		Distance:     distance,
		InterruptPin: interrupt,
		Temperature:  temperature,
		SensorFlag:   sensorFlag,
	}, nil
}
