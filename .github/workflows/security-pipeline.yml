name: Security Pipeline
permissions:
  contents: read
  pull-requests: write
  security-events: write
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  security-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/server
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ./server/go.mod
          # https://github.com/actions/setup-go/tree/v4/?tab=readme-ov-file#caching-dependency-files-and-build-outputs
          cache-dependency-path: ./server/go.sum # to fix caching warning from action

      - name: Get dependencies
        run: go mod tidy
    
      # Run Go tests with race detection (helps catch data race issues)
      - name: Run Go Tests with Race Detection
        run: go test -race ./...

      # it seems like I cannot use the default setup from - https://github.com/marketplace/actions/gosec-security-checker#github-action
      # The working directory I am trying to use isn't being respected.
      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.22.2

      # Run Gosec and generate SARIF output for GitHub Security tab
      - name: Run Gosec Security Scanner
        run: gosec -fmt sarif -out gosec-report.sarif ./...

      - name: Upload Gosec SARIF Report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: server/gosec-report.sarif

  extract-images:
      runs-on: ubuntu-latest
      outputs:
        images: ${{ steps.set-matrix.outputs.images }}
      steps:
        - name: Checkout Source
          uses: actions/checkout@v3

        - name: Extract Images from docker-compose.yml
          id: set-matrix
          run: |
            images=$(grep -E '^\s*image:' monitoring/docker-compose.yml | awk '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
            echo "Extracted images: $images"
            echo "images=$images" >> $GITHUB_OUTPUT

  # should be with the previous to allow Snyk to check images in parallel
  snyk-docker-scan:
    runs-on: ubuntu-latest
    needs: extract-images
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.extract-images.outputs.images) }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Run Snyk on ${{ matrix.image }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        with:
          image: ${{ matrix.image }}
          sarif: true
          args: |
            --severity-threshold=high
            --sarif-file-output=snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Sanitize Image Name
        id: sanitize
        run: |
          safe_name=$(echo "${{ matrix.image }}" | tr '/:' '-')
          echo "safe_name=$safe_name" >> $GITHUB_OUTPUT

      - name: Upload Snyk SARIF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-${{ steps.sanitize.outputs.safe_name }}
          path: snyk.sarif

  snyk-aggregate:
    runs-on: ubuntu-latest
    needs: snyk-docker-scan
    steps:
      - name: Download Snyk SARIF Artifacts
        uses: actions/download-artifact@v4
        with:
          path: snyk-results

      - name: Merge SARIF Files
        run: |
          if ls snyk-results/**/*.sarif 1> /dev/null 2>&1; then
            jq -s '{ "version": "2.1.0", "runs": map(.runs) | add }' snyk-results/**/*.sarif > combined-snyk.sarif
          else
            echo '{ "version": "2.1.0", "runs": [] }' > combined-snyk.sarif
          fi

      - name: Upload Combined SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: combined-snyk.sarif
