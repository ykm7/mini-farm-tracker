name: Security Pipeline
permissions:
  contents: read
  pull-requests: write
  security-events: write
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  security-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/server
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ./server/go.mod
          # https://github.com/actions/setup-go/tree/v4/?tab=readme-ov-file#caching-dependency-files-and-build-outputs
          cache-dependency-path: ./server/go.sum # to fix caching warning from action

      - name: Get dependencies
        run: go mod tidy
    
      # Run Go tests with race detection (helps catch data race issues)
      - name: Run Go Tests with Race Detection
        run: go test -race ./...

      # it seems like I cannot use the default setup from - https://github.com/marketplace/actions/gosec-security-checker#github-action
      # The working directory I am trying to use isn't being respected.
      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.22.2

      # Run Gosec and generate SARIF output for GitHub Security tab
      - name: Run Gosec Security Scanner
        run: gosec -fmt sarif -out gosec-report.sarif ./...

      - name: Upload Gosec SARIF Report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: server/gosec-report.sarif

  extract-images:
      runs-on: ubuntu-latest
      outputs:
        images: ${{ steps.set-matrix.outputs.images }}
      steps:
        - name: Checkout Source
          uses: actions/checkout@v3

        - name: Extract Images from docker-compose.yml
          id: set-matrix
          run: |
            images=$(grep -E '^\s*image:' monitoring/docker-compose.yml | awk '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
            echo "Extracted images: $images"
            echo "images=$images" >> $GITHUB_OUTPUT

  setup-snyk:
    runs-on: ubuntu-latest
    outputs:
      snyk-cache-key: ${{ steps.cache-snyk.outputs.cache-hit }}
    steps:
      - name: Cache Snyk CLI
        id: cache-snyk
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: snyk-${{ runner.os }}

      - name: Install Snyk CLI
        if: steps.cache-snyk.outputs.cache-hit != 'true'
        run: npm install -g snyk

  # should be with the previous to allow Snyk to check images in parallel
  snyk-docker-scan:
    runs-on: ubuntu-latest
    needs: [extract-images, setup-snyk]
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.extract-images.outputs.images) }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Run Snyk on ${{ matrix.image }}
        run: snyk container test ${{ matrix.image }} --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Post results as a PR comment (only on PRs)
      - name: Post PR Comment with Vulnerabilities
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          snyk container test ${{ matrix.image }} --json > snyk-results.json || true
          comment=$(jq -r '"### Snyk Scan Report for \(.image)\n\n" + (if .vulnerabilities then (.vulnerabilities[] | "- \(.title) (\(.severity))\n") else "No vulnerabilities found\n" end)' snyk-results.json)
          gh pr comment ${{ github.event.pull_request.number }} --body "$comment"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
