name: Security Pipeline
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  security-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/server
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ./server/go.mod
          # https://github.com/actions/setup-go/tree/v4/?tab=readme-ov-file#caching-dependency-files-and-build-outputs
          cache-dependency-path: ./server/go.sum # to fix caching warning from action

      - name: Get dependencies
        run: go mod tidy
    
      # Run Go tests with race detection (helps catch data race issues)
      - name: Run Go Tests with Race Detection
        run: go test -race ./...

      # it seems like I cannot use the default setup from - https://github.com/marketplace/actions/gosec-security-checker#github-action
      # The working directory I am trying to use isn't being respected.
      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.22.2

      # Run Gosec and generate SARIF output for GitHub Security tab
      - name: Run Gosec Security Scanner
        run: gosec -fmt sarif -out gosec-report.sarif ./...

      - name: Upload Gosec SARIF Report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: server/gosec-report.sarif

  snyk-docker-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Images (Monitoring)
        run: docker build -t mini-farm-monitoring ./monitoring

      - name: Run Snyk on Docker Image
        uses: snyk/actions/docker@master
        with:
          image: mini-farm-monitoring
          args: --file=./monitoring/Dockerfile
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Extract and Scan Base Images
        run: |
          images=$(yq e '.services.*.image' monitoring/docker-compose.yml)
          for img in $images; do
            echo "Scanning $img..."
            snyk container test $img --severity-threshold=high
          done
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}