name: Security Pipeline
permissions:
  contents: read
  pull-requests: write
  security-events: write
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  security-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/server
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ./server/go.mod
          # https://github.com/actions/setup-go/tree/v4/?tab=readme-ov-file#caching-dependency-files-and-build-outputs
          cache-dependency-path: ./server/go.sum # to fix caching warning from action

      - name: Get dependencies
        run: go mod tidy
    
      # Run Go tests with race detection (helps catch data race issues)
      - name: Run Go Tests with Race Detection
        run: go test -race ./...

      # it seems like I cannot use the default setup from - https://github.com/marketplace/actions/gosec-security-checker#github-action
      # The working directory I am trying to use isn't being respected.
      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.22.2

      # Run Gosec and generate SARIF output for GitHub Security tab
      - name: Run Gosec Security Scanner
        run: gosec -fmt sarif -out gosec-report.sarif ./...

      - name: Upload Gosec SARIF Report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: server/gosec-report.sarif

  extract-images:
      runs-on: ubuntu-latest
      outputs:
        images: ${{ steps.set-matrix.outputs.images }}
      steps:
        - name: Checkout Source
          uses: actions/checkout@v3

        - name: Extract Images from docker-compose.yml
          id: set-matrix
          run: |
            images=$(grep -E '^\s*image:' monitoring/docker-compose.yml | awk '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
            echo "Extracted images: $images"
            echo "images=$images" >> $GITHUB_OUTPUT

  # should be with the previous to allow Snyk to check images in parallel
  snyk-docker-scan:
    runs-on: ubuntu-latest
    needs: extract-images
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.extract-images.outputs.images) }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      # have to make sure the expected SARIF filename can be valid from the docker image
      - name: Sanitize Image Name
        id: sanitize
        run: |
          safe_name=$(echo "${{ matrix.image }}" | tr '/:' '-')
          echo "safe_name=$safe_name" >> $GITHUB_OUTPUT

      - name: Run Snyk on ${{ matrix.image }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        with:
          image: ${{ matrix.image }}
          # should be enabled by default - https://github.com/snyk/actions/tree/master/docker#snyk-docker-action
          # but it appears dependent on the use of "--file=Dockerfile". Trying some combinations
          sarif: true
          json: true
          args: --severity-threshold=high --sarif-file-output=snyk-${{ steps.sanitize.outputs.safe_name }}.sarif 
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-${{ steps.sanitize.outputs.safe_name }}.sarif
          category: snyk-${{ steps.sanitize.outputs.safe_name }}

  #     - name: Upload Snyk SARIF as Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: snyk-${{ steps.sanitize.outputs.safe_name }}
  #         path: snyk-${{ steps.sanitize.outputs.safe_name }}.sarif

  # list-artifacts:
  #   runs-on: ubuntu-latest
  #   needs: snyk-docker-scan
  #   outputs:
  #     artifact-names: ${{ steps.collect.outputs.artifact-names }}
  #   steps:
  #     - name: Download All Snyk Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: snyk-results

  #     - name: Collect Artifact Names
  #       id: collect
  #       run: |
  #         names=$(ls snyk-results | jq -R -s -c 'split("\n")[:-1]')
  #         echo "artifact-names=$names" >> $GITHUB_OUTPUT
  #         echo "Found artifacts: $names"

  # upload-sarif-matrix:
  #   runs-on: ubuntu-latest
  #   needs: list-artifacts
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       sarif_name: ${{ fromJson(needs.list-artifacts.outputs.artifact-names) }}
  #   steps:
  #     - name: Checkout Source
  #       uses: actions/checkout@v3

  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ matrix.sarif_name }}
  #         path: sarif-result

  #     - name: Upload SARIF
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: sarif-result/${{ matrix.sarif_name }}.sarif
  #         category: ${{ matrix.sarif_name }}
